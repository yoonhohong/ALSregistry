ser = ser %>%
group_by(Provider_Ocode, Study_ID) %>%
summarize(sample_visit = list(table(visit_no)))
ser = ser %>%
group_by(Provider_Ocode, Study_ID) %>%
summarize(sample_visit = list(table(visit_no)))
head(ser)
ser = bio[grep("SER", bio$Sample_Bcode), ]
ser$visit_no = regmatches(ser$Sample_Bcode, regexpr("SER..", ser$Sample_Bcode))
ser$visit_no = regmatches(ser$visit_no, regexpr("[0-9][0-9]", ser$visit_no))
ser$visit_no = as.integer(ser$visit_no)
head(ser)
ser_temp = ser %>%
group_by(Study_ID, Provider_Ocode, Hosp_ID, visit_no) %>%
summarize(Sample_count = count())
ser_temp = ser %>%
group_by(Study_ID, Provider_Ocode, Hosp_ID, visit_no) %>%
summarize(Sample_count = n())
head(ser_temp)
pla$visit_no = regmatches(pla$Sample_Bcode, regexpr("PLA..", pla$Sample_Bcode))
pla$visit_no = regmatches(pla$visit_no, regexpr("[0-9][0-9]", pla$visit_no))
pla$visit_no = as.integer(pla$visit_no)
pla_temp = pla %>%
group_by(Study_ID, Provider_Ocode, Hosp_ID, visit_no) %>%
summarize(Sample_count = n())
head(pla_temp)
head(pla_temp, 10)
head(bio)
tail(tio)
tail(bio)
uri = bio[grep("URI", bio$Sample_Bcode), ]
head(uri)
ur = bio[grep("UR", bio$Sample_Bcode), ]
head(ur)
urn = bio[grep("URN", bio$Sample_Bcode), ]
ser = bio[grep("SER", bio$Sample_Bcode), ]
buf = bio[grep("BUF", bio$Sample_Bcode), ]
pla = bio[grep("PLA", bio$Sample_Bcode), ]
csf = bio[grep("CSF", bio$Sample_Bcode), ]
urn = bio[grep("URN", bio$Sample_Bcode), ]
ser$visit_no = regmatches(ser$Sample_Bcode, regexpr("SER..", ser$Sample_Bcode))
ser$visit_no = regmatches(ser$visit_no, regexpr("[0-9][0-9]", ser$visit_no))
ser$visit_no = as.integer(ser$visit_no)
ser_temp = ser %>%
group_by(Study_ID, Provider_Ocode, Hosp_ID, visit_no) %>%
summarize(Sample_count = n())
pla$visit_no = regmatches(pla$Sample_Bcode, regexpr("PLA..", pla$Sample_Bcode))
pla$visit_no = regmatches(pla$visit_no, regexpr("[0-9][0-9]", pla$visit_no))
pla$visit_no = as.integer(pla$visit_no)
pla_temp = pla %>%
group_by(Study_ID, Provider_Ocode, Hosp_ID, visit_no) %>%
summarize(Sample_count = n())
buf$visit_no = regmatches(buf$Sample_Bcode, regexpr("BUF..", buf$Sample_Bcode))
buf$visit_no = regmatches(buf$visit_no, regexpr("[0-9][0-9]", buf$visit_no))
buf$visit_no = as.integer(buf$visit_no)
buf_temp = buf %>%
group_by(Study_ID, Provider_Ocode, Hosp_ID, visit_no) %>%
summarize(Sample_count = n())
csf$visit_no = regmatches(csf$Sample_Bcode, regexpr("CSF..", csf$Sample_Bcode))
csf$visit_no = regmatches(csf$visit_no, regexpr("[0-9][0-9]", csf$visit_no))
csf$visit_no = as.integer(csf$visit_no)
csf_temp = csf %>%
group_by(Study_ID, Provider_Ocode, Hosp_ID, visit_no) %>%
summarize(Sample_count = n())
urn$visit_no = regmatches(urn$Sample_Bcode, regexpr("URN..", urn$Sample_Bcode))
urn$visit_no = regmatches(urn$visit_no, regexpr("[0-9][0-9]", urn$visit_no))
urn$visit_no = as.integer(urn$visit_no)
urn_temp = urn %>%
group_by(Study_ID, Provider_Ocode, Hosp_ID, visit_no) %>%
summarize(Sample_count = n())
head(ser_temp)
?paste
paste("A", "B", "C", sep = " ")
output$SER = renderText({
if (is.null(selected_id2())) {
print("SER:")
} else {
temp = ser_temp %>%
filter(Study_ID %in% selected_id2())
if (dim(temp)[1] == 0) {
paste("SER: ", "None")
} else {
for (i in 1:dim(temp)[1]) {
paste("SER: ", temp$Sample_count[i], temp$visit_no[i], sep = " in visit ")
print("\n")
}
}
}
})
shiny::runApp()
head(ser_temp)
ser_temp$visit_no[c(1,2)]
runApp()
ser_temp[ser_temp$Study_ID == "1080", ]
runApp()
ser_temp[ser_temp$Study_ID == "1080", ]$Sample_count
paste(ser_temp[ser_temp$Study_ID == "1080", ]$Sample_count, collapse = "+")
runApp()
x = c(3,3,4)
paste(x, sep="_")
paste(x, collapse ="_")
paste0(x, sep="_")
paste(3,4,5, sep = "_")
runApp()
runApp()
q()
# ALSregistry2
# https://github.com/yoonhohong/ALSregistry2
# Shiny app for interactive case review
library(readr)
library(tidyr)
library(dplyr)
library(janitor)
# Set data files
list_files = list.files("./data", pattern="*.csv")
base_file = paste("./data", list_files[grep("Base", list_files)], sep = "/")
dx_file = paste("./data", list_files[grep("Dx", list_files)], sep = "/")
fu_file = paste("./data", list_files[grep("Follow", list_files)], sep = "/")
event_file = paste("./data", list_files[grep("Event", list_files)], sep = "/")
close_file = paste("./data", list_files[grep("Close", list_files)], sep = "/")
Biobank1_file = paste("./data", list_files[grep("Biobank1", list_files)], sep = "/")
Biobank2_file = paste("./data", list_files[grep("Biobank2", list_files)], sep = "/")
# Date of registry updated
date_update = strsplit(dx_file, split = "_")[[1]][3]
date_update_registry = as.Date(date_update, format = "%Y%m%d")
# Read-in data from data files
base = read_csv(base_file,
col_types = cols_only(
Study_ID = col_factor(),
Hosp_ID = col_character())
) %>%
remove_empty("rows")
dx = read_csv(dx_file,
col_types = cols_only(
Study_ID = col_factor(),
Sex = col_factor(),
Date_birth = col_date(format = "%Y.%m.%d"),
Date_onset = col_date(format = "%Y.%m.%d"),
Date_dx = col_date(format = "%Y.%m.%d"),
Date_enrollment = col_date(format = "%Y.%m.%d"),
Onset_region = col_factor(),
Dx = col_factor()
)) %>% remove_empty("rows")
dx = dx %>%
mutate(Age_dx = as.numeric(format(Date_dx, "%Y")) -
as.numeric(format(Date_birth, "%Y")))
base = merge(base, dx, all.x = T, by = "Study_ID") %>%
select(Study_ID, Hosp_ID, Sex, Age_dx, Dx)
fu = read_csv(fu_file,
col_types = cols(
Study_ID = col_factor(),
Date_visit = col_date(format = "%Y.%m.%d"),
Wt = col_double(),
FVC_percent = col_double(),
ALSFRS = col_integer(),
Mitos = col_factor()
)) %>% remove_empty("rows")
fu = fu %>%
group_by(Study_ID) %>%
arrange(Date_visit) %>%
mutate(Visit_interval = as.numeric(
difftime(Date_visit, Date_visit[1], units = "weeks"))) %>%
mutate(Time_from_latest_visit = as.numeric(
difftime(date_update_registry, last(Date_visit), units = "weeks")))
fu_alsfrs = fu %>%
filter(!is.na(ALSFRS))
fu_fvc = fu %>%
filter(!is.na(FVC_percent))
event = read_csv(event_file,
col_types = cols(
Study_ID = col_factor(),
Event = col_factor(),
Date_event = col_date(format = "%Y.%m.%d")
))
event = event[complete.cases(event),]
close = read_csv(close_file,
col_types = cols(
Study_ID = col_factor(),
Close_reason = col_factor(),
Date_close = col_date(format = "%Y.%m.%d")
))
close = close[complete.cases(close),]
tracheo = event %>%
filter(Event == "Tracheostomy")
colnames(tracheo) = c("Study_ID", "Close_reason", "Date_close")
close_tracheo = rbind(close, tracheo)
close_tracheo_first = close_tracheo %>%
group_by(Study_ID) %>%
arrange(Date_close) %>%
filter(Date_close == first(Date_close))
close_all = merge(base, close_tracheo_first, all.x = T, by = "Study_ID") %>%
mutate(Close_reason = as.character(Close_reason)) %>%
select(Study_ID, Close_reason, Date_close) %>%
mutate(Close_reason = if_else(is.na(Close_reason), "Undefined",
Close_reason))
fu_latest = fu %>%
group_by(Study_ID) %>%
arrange(Date_visit) %>%
filter(Date_visit == last(Date_visit)) %>%
mutate(Date_visit_latest = Date_visit) %>%
select(Study_ID, Date_visit_latest)
close_with_latest_visit = merge(close_all, fu_latest, all = T,
by = "Study_ID")
close_with_latest_visit$Close_reason = factor(
close_with_latest_visit$Close_reason)
levels(close_with_latest_visit$Close_reason) = list(
Undefined = "Undefined",
Death_or_tracheostomy = c("Death", "Tracheostomy"),
Refer = "Refer",
Lost_to_fu = "Lost to f/u")
bio1 = read_csv(Biobank1_file,
col_types = cols(
Study_ID = col_factor(),
Hosp_ID = col_factor(),
Provider_Ocode = col_factor()
))
bio1 = bio1[complete.cases(bio1),]
bio2 = read_csv(Biobank2_file,
col_types = cols(
Provider_Ocode = col_factor(),
Sample_Bcode = col_character()
))
bio2 = bio2[complete.cases(bio2),]
bio = merge(bio1, bio2, all.y = T, by = "Provider_Ocode")
# setdiff(bio2$Provider_Ocode, bio1$Provider_Ocode)
ser = bio[grep("SER", bio$Sample_Bcode), ]
buf = bio[grep("BUF", bio$Sample_Bcode), ]
pla = bio[grep("PLA", bio$Sample_Bcode), ]
csf = bio[grep("CSF", bio$Sample_Bcode), ]
urn = bio[grep("URN", bio$Sample_Bcode), ]
ser$visit_no = regmatches(ser$Sample_Bcode, regexpr("SER..", ser$Sample_Bcode))
ser$visit_no = regmatches(ser$visit_no, regexpr("[0-9][0-9]", ser$visit_no))
ser$visit_no = as.integer(ser$visit_no)
ser_temp = ser %>%
group_by(Study_ID, Provider_Ocode, Hosp_ID, visit_no) %>%
summarize(Sample_count = n())
pla$visit_no = regmatches(pla$Sample_Bcode, regexpr("PLA..", pla$Sample_Bcode))
pla$visit_no = regmatches(pla$visit_no, regexpr("[0-9][0-9]", pla$visit_no))
pla$visit_no = as.integer(pla$visit_no)
pla_temp = pla %>%
group_by(Study_ID, Provider_Ocode, Hosp_ID, visit_no) %>%
summarize(Sample_count = n())
buf$visit_no = regmatches(buf$Sample_Bcode, regexpr("BUF..", buf$Sample_Bcode))
buf$visit_no = regmatches(buf$visit_no, regexpr("[0-9][0-9]", buf$visit_no))
buf$visit_no = as.integer(buf$visit_no)
buf_temp = buf %>%
group_by(Study_ID, Provider_Ocode, Hosp_ID, visit_no) %>%
summarize(Sample_count = n())
csf$visit_no = regmatches(csf$Sample_Bcode, regexpr("CSF..", csf$Sample_Bcode))
csf$visit_no = regmatches(csf$visit_no, regexpr("[0-9][0-9]", csf$visit_no))
csf$visit_no = as.integer(csf$visit_no)
csf_temp = csf %>%
group_by(Study_ID, Provider_Ocode, Hosp_ID, visit_no) %>%
summarize(Sample_count = n())
urn$visit_no = regmatches(urn$Sample_Bcode, regexpr("URN..", urn$Sample_Bcode))
urn$visit_no = regmatches(urn$visit_no, regexpr("[0-9][0-9]", urn$visit_no))
urn$visit_no = as.integer(urn$visit_no)
urn_temp = urn %>%
group_by(Study_ID, Provider_Ocode, Hosp_ID, visit_no) %>%
summarize(Sample_count = n())
head(bio)
temp = read_csv("~/exomiR_serum_list_ALS.csv")
head(temp)
pt_list = temp$Provide_Bcode
pt_list = unique(temp$Provide_Bcode)
pt_list
head(bio)
bio$Provide_Bcode = regmatches(bio$Sample_Bcode, regexpr("^......", bio$Sample_Bcode))
head(bio)
bio$Provide_Bcode = regmatches(bio$Sample_Bcode, regexpr("^........", bio$Sample_Bcode))
head(bio)
bio = merge(bio1, bio2, all.y = T, by = "Provider_Ocode")
bio$Provider_Bcode = regmatches(bio$Sample_Bcode, regexpr("^........", bio$Sample_Bcode))
bio_sub = bio %>%
filter(Provider_Bcode %in% pt_list) %>%
select(Provider_Ocode, Provider_Bcode, Sample_Bcode, Hosp_ID, Study_ID)
head(bio_sub)
ser = bio[grep("SER", bio$Sample_Bcode), ]
buf = bio[grep("BUF", bio$Sample_Bcode), ]
pla = bio[grep("PLA", bio$Sample_Bcode), ]
csf = bio[grep("CSF", bio$Sample_Bcode), ]
urn = bio[grep("URN", bio$Sample_Bcode), ]
ser$visit_no = regmatches(ser$Sample_Bcode, regexpr("SER..", ser$Sample_Bcode))
ser$visit_no = regmatches(ser$visit_no, regexpr("[0-9][0-9]", ser$visit_no))
ser$visit_no = as.integer(ser$visit_no)
ser_temp = ser %>%
group_by(Study_ID, Provider_Ocode, Hosp_ID, visit_no) %>%
summarize(Sample_count = n())
pla$visit_no = regmatches(pla$Sample_Bcode, regexpr("PLA..", pla$Sample_Bcode))
pla$visit_no = regmatches(pla$visit_no, regexpr("[0-9][0-9]", pla$visit_no))
pla$visit_no = as.integer(pla$visit_no)
pla_temp = pla %>%
group_by(Study_ID, Provider_Ocode, Hosp_ID, visit_no) %>%
summarize(Sample_count = n())
buf$visit_no = regmatches(buf$Sample_Bcode, regexpr("BUF..", buf$Sample_Bcode))
buf$visit_no = regmatches(buf$visit_no, regexpr("[0-9][0-9]", buf$visit_no))
buf$visit_no = as.integer(buf$visit_no)
buf_temp = buf %>%
group_by(Study_ID, Provider_Ocode, Hosp_ID, visit_no) %>%
summarize(Sample_count = n())
csf$visit_no = regmatches(csf$Sample_Bcode, regexpr("CSF..", csf$Sample_Bcode))
csf$visit_no = regmatches(csf$visit_no, regexpr("[0-9][0-9]", csf$visit_no))
csf$visit_no = as.integer(csf$visit_no)
csf_temp = csf %>%
group_by(Study_ID, Provider_Ocode, Hosp_ID, visit_no) %>%
summarize(Sample_count = n())
urn$visit_no = regmatches(urn$Sample_Bcode, regexpr("URN..", urn$Sample_Bcode))
urn$visit_no = regmatches(urn$visit_no, regexpr("[0-9][0-9]", urn$visit_no))
urn$visit_no = as.integer(urn$visit_no)
urn_temp = urn %>%
group_by(Study_ID, Provider_Ocode, Hosp_ID, visit_no) %>%
summarize(Sample_count = n())
ser_sub = ser %>%
filter(Provider_Bcode %in% pt_list) %>%
select(Provider_Ocode, Provider_Bcode, Sample_Bcode, Hosp_ID, Study_ID)
head(ser_sub)
unique(ser_sub$Study_ID)
sort(unique(ser_sub$Study_ID))
sort(unique(ser_sub$Study_ID), descending = T)
sort(unique(ser_sub$Study_ID), descending = F)
sort(unique(as.numeric(ser_sub$Study_ID)), descending = F)
unique(ser_sub$Study_ID)
pt_list2 = c("1021", "1031", "1039", "1127", "11872", "1236", "1316", "1390")
ser_sub2 = ser %>%
filter(Study_ID %in% pt_list2) %>%
select(Provider_Ocode, Provider_Bcode, Sample_Bcode, Hosp_ID, Study_ID)
head(ser_sub2)
pt_list1 = c("1030", "1060", "1086", "1117", "1145", "1166", "1167", "1181", "1125", "1231", "1251", "1321", "1322", "1329", "1332", "1342", "1343")
length(pt_list1)
pt_list_all = c(pt_list1, pt_list2)
ser_sub2 = ser %>%
filter(Study_ID %in% pt_list_all) %>%
select(Provider_Ocode, Provider_Bcode, Sample_Bcode, Hosp_ID, Study_ID)
head(ser_sub2)
ser_sub3 = ser_sub2[grep("SER01", ser_sub2$Sample_Bcode), ]
head(ser_sub3)
getwd()
write.csv(ser_sub3, "SERUM_LIST_ALS.csv", row.names = F)
q()
# ALSregistry2
# https://github.com/yoonhohong/ALSregistry2
# Shiny app for interactive case review
library(readr)
library(tidyr)
library(dplyr)
library(janitor)
# Set data files
list_files = list.files("./data", pattern="*.csv")
base_file = paste("./data", list_files[grep("Base", list_files)], sep = "/")
dx_file = paste("./data", list_files[grep("Dx", list_files)], sep = "/")
fu_file = paste("./data", list_files[grep("Follow", list_files)], sep = "/")
event_file = paste("./data", list_files[grep("Event", list_files)], sep = "/")
close_file = paste("./data", list_files[grep("Close", list_files)], sep = "/")
Biobank1_file = paste("./data", list_files[grep("Biobank1", list_files)], sep = "/")
Biobank2_file = paste("./data", list_files[grep("Biobank2", list_files)], sep = "/")
# Date of registry updated
date_update = strsplit(dx_file, split = "_")[[1]][3]
date_update_registry = as.Date(date_update, format = "%Y%m%d")
# Read-in data from data files
base = read_csv(base_file,
col_types = cols_only(
Study_ID = col_factor(),
Hosp_ID = col_character())
) %>%
remove_empty("rows")
dx = read_csv(dx_file,
col_types = cols_only(
Study_ID = col_factor(),
Sex = col_factor(),
Date_birth = col_date(format = "%Y.%m.%d"),
Date_onset = col_date(format = "%Y.%m.%d"),
Date_dx = col_date(format = "%Y.%m.%d"),
Date_enrollment = col_date(format = "%Y.%m.%d"),
Onset_region = col_factor(),
Dx = col_factor()
)) %>% remove_empty("rows")
dx = dx %>%
mutate(Age_dx = as.numeric(format(Date_dx, "%Y")) -
as.numeric(format(Date_birth, "%Y")))
base = merge(base, dx, all.x = T, by = "Study_ID") %>%
select(Study_ID, Hosp_ID, Sex, Age_dx, Dx)
fu = read_csv(fu_file,
col_types = cols(
Study_ID = col_factor(),
Date_visit = col_date(format = "%Y.%m.%d"),
Wt = col_double(),
FVC_percent = col_double(),
ALSFRS = col_integer(),
Mitos = col_factor()
)) %>% remove_empty("rows")
fu = fu %>%
group_by(Study_ID) %>%
arrange(Date_visit) %>%
mutate(Visit_interval = as.numeric(
difftime(Date_visit, Date_visit[1], units = "weeks"))) %>%
mutate(Time_from_latest_visit = as.numeric(
difftime(date_update_registry, last(Date_visit), units = "weeks")))
fu_alsfrs = fu %>%
filter(!is.na(ALSFRS))
fu_fvc = fu %>%
filter(!is.na(FVC_percent))
event = read_csv(event_file,
col_types = cols(
Study_ID = col_factor(),
Event = col_factor(),
Date_event = col_date(format = "%Y.%m.%d")
))
event = event[complete.cases(event),]
close = read_csv(close_file,
col_types = cols(
Study_ID = col_factor(),
Close_reason = col_factor(),
Date_close = col_date(format = "%Y.%m.%d")
))
close = close[complete.cases(close),]
tracheo = event %>%
filter(Event == "Tracheostomy")
colnames(tracheo) = c("Study_ID", "Close_reason", "Date_close")
close_tracheo = rbind(close, tracheo)
close_tracheo_first = close_tracheo %>%
group_by(Study_ID) %>%
arrange(Date_close) %>%
filter(Date_close == first(Date_close))
close_all = merge(base, close_tracheo_first, all.x = T, by = "Study_ID") %>%
mutate(Close_reason = as.character(Close_reason)) %>%
select(Study_ID, Close_reason, Date_close) %>%
mutate(Close_reason = if_else(is.na(Close_reason), "Undefined",
Close_reason))
fu_latest = fu %>%
group_by(Study_ID) %>%
arrange(Date_visit) %>%
filter(Date_visit == last(Date_visit)) %>%
mutate(Date_visit_latest = Date_visit) %>%
select(Study_ID, Date_visit_latest)
close_with_latest_visit = merge(close_all, fu_latest, all = T,
by = "Study_ID")
close_with_latest_visit$Close_reason = factor(
close_with_latest_visit$Close_reason)
levels(close_with_latest_visit$Close_reason) = list(
Undefined = "Undefined",
Death_or_tracheostomy = c("Death", "Tracheostomy"),
Refer = "Refer",
Lost_to_fu = "Lost to f/u")
bio1 = read_csv(Biobank1_file,
col_types = cols(
Study_ID = col_factor(),
Hosp_ID = col_factor(),
Provider_Ocode = col_factor()
))
bio1 = bio1[complete.cases(bio1),]
bio2 = read_csv(Biobank2_file,
col_types = cols(
Provider_Ocode = col_factor(),
Sample_Bcode = col_character()
))
bio2 = bio2[complete.cases(bio2),]
bio = merge(bio1, bio2, all.y = T, by = "Provider_Ocode")
bio$Provider_Bcode = regmatches(bio$Sample_Bcode, regexpr("^........", bio$Sample_Bcode))
# setdiff(bio2$Provider_Ocode, bio1$Provider_Ocode)
ser = bio[grep("SER", bio$Sample_Bcode), ]
buf = bio[grep("BUF", bio$Sample_Bcode), ]
pla = bio[grep("PLA", bio$Sample_Bcode), ]
csf = bio[grep("CSF", bio$Sample_Bcode), ]
urn = bio[grep("URN", bio$Sample_Bcode), ]
ser$visit_no = regmatches(ser$Sample_Bcode, regexpr("SER..", ser$Sample_Bcode))
ser$visit_no = regmatches(ser$visit_no, regexpr("[0-9][0-9]", ser$visit_no))
ser$visit_no = as.integer(ser$visit_no)
ser_temp = ser %>%
group_by(Study_ID, Provider_Ocode, Hosp_ID, visit_no) %>%
summarize(Sample_count = n())
pla$visit_no = regmatches(pla$Sample_Bcode, regexpr("PLA..", pla$Sample_Bcode))
pla$visit_no = regmatches(pla$visit_no, regexpr("[0-9][0-9]", pla$visit_no))
pla$visit_no = as.integer(pla$visit_no)
pla_temp = pla %>%
group_by(Study_ID, Provider_Ocode, Hosp_ID, visit_no) %>%
summarize(Sample_count = n())
buf$visit_no = regmatches(buf$Sample_Bcode, regexpr("BUF..", buf$Sample_Bcode))
buf$visit_no = regmatches(buf$visit_no, regexpr("[0-9][0-9]", buf$visit_no))
buf$visit_no = as.integer(buf$visit_no)
buf_temp = buf %>%
group_by(Study_ID, Provider_Ocode, Hosp_ID, visit_no) %>%
summarize(Sample_count = n())
csf$visit_no = regmatches(csf$Sample_Bcode, regexpr("CSF..", csf$Sample_Bcode))
csf$visit_no = regmatches(csf$visit_no, regexpr("[0-9][0-9]", csf$visit_no))
csf$visit_no = as.integer(csf$visit_no)
csf_temp = csf %>%
group_by(Study_ID, Provider_Ocode, Hosp_ID, visit_no) %>%
summarize(Sample_count = n())
urn$visit_no = regmatches(urn$Sample_Bcode, regexpr("URN..", urn$Sample_Bcode))
urn$visit_no = regmatches(urn$visit_no, regexpr("[0-9][0-9]", urn$visit_no))
urn$visit_no = as.integer(urn$visit_no)
urn_temp = urn %>%
group_by(Study_ID, Provider_Ocode, Hosp_ID, visit_no) %>%
summarize(Sample_count = n())
ser_sub = ser %>%
filter(Provider_Bcode %in% pt_list) %>%
select(Provider_Ocode, Provider_Bcode, Sample_Bcode, Hosp_ID, Study_ID)
unique(ser_sub$Study_ID)
pt_list1 = c("1030", "1060", "1086", "1117", "1145",
"1166", "1167", "1181", "1125", "1231",
"1251", "1321", "1322", "1329", "1332",
"1342", "1343") # 17 patients
pt_list2 = c("1031", "1039", "1046", "1058","1080",
"1127", "11872", "1236", "1316", "1390",
"1159", "1182") # 12 patients
pt_list_all = c(pt_list1, pt_list2)
ser_sub2 = ser %>%
filter(Study_ID %in% pt_list_all) %>%
select(Provider_Ocode, Provider_Bcode, Sample_Bcode, Hosp_ID, Study_ID)
ser_sub3 = ser_sub2[grep("SER01", ser_sub2$Sample_Bcode), ]
write.csv(ser_sub3, "SERUM_LIST_ALS.csv", row.names = F)
q()
