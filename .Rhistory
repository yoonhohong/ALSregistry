?Rle
seqnames(gr)
rabges(gr)
ranges(gr)
strand(gr)
granges(gr)
mcols(gr)
mcols(gr)$score
seqlengths(gr)
seqnames(gr)
ranges(gr)
strand(gr)
seqlengths(gr) <- c(249250621, 243199373, 198022430)
seqlengths(gr)
seqnames(gr)
names(gr)
length(gr)
sp <- split(gr, rep(1:2, each=5))
sp
c(sp[[1]], sp[[2]])
gr[2:3, "GC"]
singles <- split(gr, names(gr))
grMod <- gr
grMod[2] <- singles[[1]]
head(grMod, n=3)
rep(singles[[2]], times = 3)
rev(gr)
gr
window(gr, start=2, end=4)
gr[2:4]
gr[c(2:3, 7:9)]
IRanges(start = c(2:7), end = c(3:9))
IRanges(start = c(2,7), end = c(3,9))
g <- gr[1:3]
g <- append(g, singles[[10]])
start(g)
end(g)
width(g)
range(g)
g
flank(g, 10)
g
flank(g, 10, start = FALSE)
shift(g, 5)
g
resize(g, 30)
?"intra-range-methods"
reduce(g)
range(g)
gaps(g)
g
disjoin(g)
coverage(g)
g
g2 <- head(gr,n=2)
g2
union(g, g2)
g
g2
union(g)
intersect(g, g2)
setdiff(g, g2)
g3 <- g[1:2]
ranges(g3[1])
g3
g
ranges(g)
ranges(g3)
ranges(g)
range(g) # reduce ranges(reads) if they are in the same seq(chromosome)
ranges(g3[1])
g3
ranges(g3[1]) <- IRanges(start = 105, end = 112)
g3
g2
punion(g2, g3)
methods(class = "GRanges")
gr1 <- GRanges(
seqnames = "chr2",
ranges = IRanges(103, 106),
strand = "+",
score = 5L, GC = 0.45)
gr2 <- GRanges(
seqnames = c("chr1", "chr1"),
ranges = IRanges(c(107, 113), width = 3),
strand = c("+", "-"),
score = 3:4, GC = c(0.3, 0.5))
grl <- GRangesList("txA" = gr1, "txB" = gr2)
grl
seqnames(gr1)
gr1 <- GRangesList("txA" = gr1, "txB" = gr2)
gr1
grl <- GRangesList("txA" = gr1, "txB" = gr2)
grl
seqnames(grl)
ranges(grl)
strand(grl)
length(grl)
length(grl[2])
length(grl[[2]])
names(grl)
seqlengths(grl)
elementNROWS(grl)
lapply(grl, nrows)
lapply(grl, nrows())
lapply(grl, nrow)
isEmpty(grl)
mcols(grl)
# lapply(grl, nrow), GRangesList
lapply(list(unlist(grl)), nrow)
unlist(grl)
# lapply(grl, nrow), GRangesList
lapply(list(unlist(grl), names = rep(c("txA", "txB"), each=c(1,2))), nrow)
# lapply(grl, nrow), GRangesList
lapply(list(unlist(grl), names = rep(c("txA", "txB"), c(1,2))), nrow)
# lapply(grl, nrow), GRangesList
temp = list(unlist(grl), names = rep(c("txA", "txB"), c(1,2)))
temp
mcols(unlist(grl))
grl1 <- GRangesList(
gr1 = GRanges("chr2", IRanges(3, 6)),
gr2 = GRanges("chr1", IRanges(c(7,13), width = 3)))
grl2 <- GRangesList(
gr1 = GRanges("chr2", IRanges(9, 12)),
gr2 = GRanges("chr1", IRanges(c(25,38), width = 3)))
pc(grl1, grl2)
pc(grl1, grl2)
grl1
grl2
pc(grl1, grl2)
grl3 = c(grl1, grl2)
grl3
regroup(grl3, names(grl3))
grl
unlist(grl)
temp = unlist(grl)
names(temp)
split(temp, names(temp))
split(temp, c(1,2,2))
grl3
grl
temp
names(temp)
gr1
gr2
length(gr2)
for (i in 1:length(grl)){
temp = grl[i]
length(temp)
}
temp = c()
for (i in 1:length(grl)){
temp[i] = grl[i]
length(temp[i])
}
temp = c()
for (i in 1:length(grl)){
k = grl[i]
temp[i] = length(k)
}
temp
grl;
grl
length(grl[2])
grl[2]
temp = c()
for (i in 1:length(grl)){
k = grl[[i]]
temp[i] = length(k)
}
temp
grl
start(grl)
length(grl)
end(grl)
width(grl)
sum(width(grl))
lengths(grl)
# lapply(grl, nrow), GRangesList
lengths(grl)
shift(grl, 20)
coverage(grl)
grl
grl[1]
grl[[1]]
grl["txA"]
grl$txB
grl[1, "score"]
grl["txB", "GC"]
rep(grl[[1]], times = 3)
rev(grl)
head(grl, n=1)
tail(grl, n=1)
window(grl, start = 1, end = 1)
gr
window(gr, start=2, end=4)
window(grl, start = 1, end = 1)
grl[IRanges(start = 2, end = 2)]
lapply(grl, length)
sapply(grl, length)
class(sapply(grl, length))
grl2 <- shift(grl, 10)
grl2
names(grl2) <- c("shiftTxA", "shiftTxB")
mapply(c, grl1, grl2)
mapply(c, grl, grl2)
Map(c, grl, grl2)
grl
grl2
grl
endoapply(grl, rev)
grl
lapply(grl, rev)
temp = lapply(grl, rev)
class(temp)
mendoapply(c, grl, grl2)
mapply(c, grl, grl2) # multivariate version of sapply
Reduce(c, grl)
grl
g
reduce(g)
reduce(grl)
Reduce(grl)
grl[[2]] <- append(grl[[2]], shift(grl[[2]], 100))
grl
grl[[2]] <- append(grl[[2]], shift(grl[[2]], 10))
grl
reduce(grl)
grl[[2]] <- append(grl[[2]], shift(grl[[2]], 5))
grl
reduce(grl)
reduce(grl[[2]])
grl
Reduce(c, grl)
?Reduce
?reduce
reduce(grl)
grl3 = c(grl1, grl2)
regroup(grl3, names(grl3)) # from GRangesList to GRangesList
grl
gr1 <- GRanges(
seqnames = "chr2",
ranges = IRanges(103, 106),
strand = "+",
score = 5L, GC = 0.45)
gr2 <- GRanges(
seqnames = c("chr1", "chr1"),
ranges = IRanges(c(107, 113), width = 3),
strand = c("+", "-"),
score = 3:4, GC = c(0.3, 0.5))
grl <- GRangesList("txA" = gr1, "txB" = gr2)
grl
grl1 <- GRangesList(
gr1 = GRanges("chr2", IRanges(3, 6)),
gr2 = GRanges("chr1", IRanges(c(7,13), width = 3)))
grl2 <- GRangesList(
gr1 = GRanges("chr2", IRanges(9, 12)),
gr2 = GRanges("chr1", IRanges(c(25,38), width = 3)))
grl3 = c(grl1, grl2)
regroup(grl3, names(grl3)) # from GRangesList to GRangesList
grl2 <- shift(grl, 10)
names(grl2) <- c("shiftTxA", "shiftTxB")
grl
Reduce(c, grl) # Reduce(fxn, GRangesList)
reduce(grl)
g
reduce(g)
grl
reduce(grl)
Reduce(grl)
grl[[2]] = append(grl[[1]], shift(grl[[1]], 2))
grl
grl1 <- GRangesList(
gr1 = GRanges("chr2", IRanges(3, 6)),
gr2 = GRanges("chr1", IRanges(c(7,13), width = 3)))
grl2 <- GRangesList(
gr1 = GRanges("chr2", IRanges(9, 12)),
gr2 = GRanges("chr1", IRanges(c(25,38), width = 3)))
pc(grl1, grl2)
grl3 = c(grl1, grl2)
regroup(grl3, names(grl3)) # from GRangesList to GRangesList
start(grl)
end(grl)
width(grl)
sum(width(grl))
lengths(grl)
shift(grl, 20)
coverage(grl)
grl[1]
grl[[1]]
grl["txA"]
grl$txB
grl[1, "score"]
grl["txB", "GC"]
rep(grl[[1]], times = 3)
rev(grl)
head(grl, n=1)
tail(grl, n=1)
window(grl, start = 1, end = 1)
grl[IRanges(start = 2, end = 2)]
grl2 <- shift(grl, 10)
names(grl2) <- c("shiftTxA", "shiftTxB")
mapply(c, grl, grl2) # multivariate version of sapply
Map(c, grl, grl2) # the same function as mapply
endoapply(grl, rev) # return a GRangesList, this is called "endomorphism"
mendoapply(c, grl, grl2) # return a GRangesList
Reduce(c, grl) # Reduce(fxn, GRangesList), return a GRanges object
grl
gr1 <- GRanges(
seqnames = "chr2",
ranges = IRanges(103, 106),
strand = "+",
score = 5L, GC = 0.45)
gr2 <- GRanges(
seqnames = c("chr1", "chr1"),
ranges = IRanges(c(107, 113), width = 3),
strand = c("+", "-"),
score = 3:4, GC = c(0.3, 0.5))
grl <- GRangesList("txA" = gr1, "txB" = gr2)
grl
grl
grl[[2]] = append(grl[[2]], shift(grl[[1]], 2))
grl
Reduce(c, grl) # Reduce(fxn, GRangesList), return a GRanges object
reduce(grl)
Reduce(grl)
gr
reduce(gr)
gr <- unlist(grl)
gr
gr$log_score <- log(gr$score)
grl <- relist(gr, grl)
grl
gr
grl
findOverlaps(gr, grl)
gr1
gr2
countOverlaps(gr, grl)
subsetByOverlaps(gr, grl)
gr
gr
grl
findOverlaps(gr, grl, select = "first") # get the index of the first overlapping element in the subject for each element in the query
findOverlaps(grl, gr, select = "first")
grl
gr
findOverlaps(grl, gr, select = "first")
gr1 <- GRanges(
seqnames = "chr2",
ranges = IRanges(103, 106),
strand = "+",
score = 5L, GC = 0.45)
gr2 <- GRanges(
seqnames = c("chr1", "chr1"),
ranges = IRanges(c(107, 113), width = 3),
strand = c("+", "-"),
score = 3:4, GC = c(0.3, 0.5))
gr1
gr2
# GRanges; seqnames, seqlengths, names, length, mcols, granges
gr <- GRanges(
seqnames = Rle(c("chr1", "chr2", "chr1", "chr3"), c(1, 3, 2, 4)),
ranges = IRanges(start = 101:110, end = 111:120, names = head(letters, 10)),
strand = Rle(strand(c("-", "+", "*", "+", "-")), c(1, 2, 2, 3, 2)),
score = 1:10,
GC = seq(1, 0, length=10))
gr
grl[[2]] = append(grl[[2]], shift(grl[[1]], 2))
gr1
gr1
gr2
gr2 <- append(gr2, shift(gr1, 2))
gr2
gr1
intersect(gr1, gr2)
pintersect(gr1, gr2)
grl
gr1
gr2
intersect(gr2, grl)
pintersect(gr2, grl)
q()
shiny::runApp('GitHub/ALSregistry/ALSregistry2')
close = read_csv('ALS_Registry_Close.csv',
col_types = cols(
Study_ID = col_character(),
Close_reason = col_factor(),
Date_close = col_date(format = "%Y.%m.%d")
))
getwd()
setwd("/Users/mac/GitHub/ALSregistry/ALSregistry2/")
close = read_csv('ALS_Registry_Close.csv',
col_types = cols(
Study_ID = col_character(),
Close_reason = col_factor(),
Date_close = col_date(format = "%Y.%m.%d")
))
close = close[complete.cases(close),]
dim(close)
summary(close)
runApp()
bio1 = read_csv("ALS_Registry_Biobank1.csv",
col_types = cols(
Study_ID = col_factor(),
Provider_Ocode = col_factor()
))
head(bio1)
bio1 = bio1[complete.cases(bio1),]
bio1 = read_csv("ALS_Registry_Biobank1.csv",
col_types = cols(
Study_ID = col_factor(),
Hosp_ID = col_factor(),
Provider_Ocode = col_factor()
))
bio1 = bio1[complete.cases(bio1),]
bio2 = bio2[complete.cases(bio2),]
bio2 = read_csv("ALS_Registry_Biobank2.csv",
col_types = cols(
Provider_Ocode = col_factor(),
Sample_Bcode = col_factor()
))
bio2 = bio2[complete.cases(bio2),]
bio = merge(bio1, bio2, by = "Provider_Ocode")
head(bio)
bio2 = read_csv("ALS_Registry_Biobank2.csv",
col_types = cols(
Provider_Ocode = col_factor(),
Sample_Bcode = col_character()
))
bio2 = bio2[complete.cases(bio2),]
bio = merge(bio1, bio2, by = "Provider_Ocode")
head(bio)
head(bio2)
bio2 = read_csv("ALS_Registry_Biobank2.csv",
col_types = cols(
Provider_Ocode = col_factor(),
Sample_Bcode = col_character()
))
bio2 = bio2[complete.cases(bio2),]
bio1 = read_csv("ALS_Registry_Biobank1.csv",
col_types = cols(
Study_ID = col_factor(),
Hosp_ID = col_factor(),
Provider_Ocode = col_character()
))
bio1 = bio1[complete.cases(bio1),]
bio = merge(bio1, bio2, by = "Provider_Ocode")
head(bio)
head(bio1)
head(bio2)
summary(bio)
head(bio)
head(bio$Sample_Bcode)
dim(bio1)
length(unique(bio1$Provider_Ocode))
length(unique(bio1$Study_ID))
bio1[duplicated(bio1$Study_ID),]
bio1[bio1$Study_ID == 1070,]
dim(bio)
bio
dim(bio)
dim(bio2)
setdiff(bio2$Provider_Ocode, bio1$Provider_Ocode)
bio = merge(bio1, bio2, by = "Provider_Ocode")
head(bio)
summary(bio)
bio1 = read_csv("ALS_Registry_Biobank1.csv",
col_types = cols(
Study_ID = col_factor(),
Hosp_ID = col_factor(),
Provider_Ocode = col_factor()
))
bio1 = bio1[complete.cases(bio1),]
bio2 = read_csv("ALS_Registry_Biobank2.csv",
col_types = cols(
Provider_Ocode = col_factor(),
Sample_Bcode = col_character()
))
bio2 = bio2[complete.cases(bio2),]
dim(bio)
bio = merge(bio1, bio2, by = "Provider_Ocode")
dim(bio)
head(bio)
head(bio$Sample_Bcode)
head(bio$Sample_Bcode, 1)
summary(bio)
?merge
bio = merge(bio1, bio2, all.x = T, all.y = T, by = "Provider_Ocode")
head(bio)
dim(bio)
dim(bbio)
dim(bio2)
dim(bio1)
bio = merge(bio1, bio2, all.y = T, by = "Provider_Ocode")
dim(bio)
head(bio)
?grep
csf = bio[grep("CSF", bio$Sample_Bcode), ]
head(csf)
ser = bio[grep("SER", bio$Sample_Bcode), ]
buf = bio[grep("BUF", bio$Sample_Bcode), ]
pla = bio[grep("PLA", bio$Sample_Bcode), ]
ser$visit_no = regmatches(ser$Sample_Bcode, regexpr("SER[0-9][0-9]"))
ser$visit_no = regmatches(ser$Sample_Bcode, regexpr("SER[0-9][0-9]", ser$Sample_Bcode))
head(ser$visit_no)
ser$visit_no = regmatches(ser$Sample_Bcode, regexpr("SER..", ser$Sample_Bcode))
ser$visit_no = regmatches(ser$visit_no, regexpr("[0-9][0-9]", ser$visit_no))
ser$visit_no
ser$visit_no = as.integer(ser$visit_no)
head(ser$visit_no)
q()
